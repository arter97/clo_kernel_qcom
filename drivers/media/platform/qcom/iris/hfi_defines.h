/* SPDX-License-Identifier: GPL-2.0-only */
/*
 * Copyright (c) 2022-2023 Qualcomm Innovation Center, Inc. All rights reserved.
 */

#ifndef _HFI_DEFINES_H_
#define _HFI_DEFINES_H_

#include <linux/types.h>

#define HFI_VIDEO_ARCH_LX			0x1

#define HFI_CMD_BEGIN				0x01000000
#define HFI_CMD_INIT				0x01000001
#define HFI_CMD_OPEN				0x01000003
#define HFI_CMD_CLOSE				0x01000004
#define HFI_CMD_START				0x01000005
#define HFI_CMD_STOP				0x01000006
#define HFI_CMD_BUFFER				0x01000009

#define HFI_PROP_IMAGE_VERSION			0x03000001

#define HFI_PROP_UBWC_MAX_CHANNELS		0x03000003
#define HFI_PROP_UBWC_MAL_LENGTH		0x03000004
#define HFI_PROP_UBWC_HBB			0x03000005
#define HFI_PROP_UBWC_BANK_SWZL_LEVEL1		0x03000006
#define HFI_PROP_UBWC_BANK_SWZL_LEVEL2		0x03000007
#define HFI_PROP_UBWC_BANK_SWZL_LEVEL3		0x03000008
#define HFI_PROP_UBWC_BANK_SPREADING		0x03000009

enum hfi_property_mode_type {
	HFI_MODE_NONE					= 0x00000000,
	HFI_MODE_PORT_SETTINGS_CHANGE			= 0x00000001,
	HFI_MODE_PROPERTY				= 0x00000002,
};

#define HFI_CMD_SUBSCRIBE_MODE			0x0100000B
#define HFI_CMD_SETTINGS_CHANGE			0x0100000C
#define HFI_CMD_END				0x01FFFFFF

#define HFI_BITMASK_BITSTREAM_WIDTH		0xffff0000
#define HFI_BITMASK_BITSTREAM_HEIGHT		0x0000ffff

#define HFI_BITMASK_FRAME_MBS_ONLY_FLAG		0x00000001

#define HFI_PROP_BEGIN				0x03000000

#define HFI_PROP_IMAGE_VERSION			0x03000001

enum hfi_codec_type {
	HFI_CODEC_DECODE_AVC	= 1,
	HFI_CODEC_ENCODE_AVC	= 2,
	HFI_CODEC_DECODE_HEVC	= 3,
	HFI_CODEC_ENCODE_HEVC	= 4,
	HFI_CODEC_DECODE_VP9	= 5,
};

#define HFI_PROP_CODEC				0x03000100

enum hfi_color_format {
	HFI_COLOR_FMT_OPAQUE        = 0,
	HFI_COLOR_FMT_NV12          = 1,
	HFI_COLOR_FMT_NV12_UBWC     = 2,
	HFI_COLOR_FMT_P010          = 3,
	HFI_COLOR_FMT_TP10_UBWC     = 4,
	HFI_COLOR_FMT_RGBA8888      = 5,
	HFI_COLOR_FMT_RGBA8888_UBWC = 6,
	HFI_COLOR_FMT_NV21          = 7,
};

#define HFI_PROP_COLOR_FORMAT			0x03000101

#define HFI_PROP_BITSTREAM_RESOLUTION		0x03000103

#define HFI_PROP_LINEAR_STRIDE_SCANLINE		0x03000104

#define HFI_PROP_CROP_OFFSETS			0x03000105

#define HFI_PROP_PROFILE			0x03000107

#define HFI_PROP_LEVEL				0x03000108

#define HFI_PROP_TIER				0x03000109

#define HFI_PROP_STAGE				0x0300010a

#define HFI_PROP_PIPE				0x0300010b

#define HFI_PROP_FRAME_RATE			0x0300010c

#define HFI_PROP_LUMA_CHROMA_BIT_DEPTH		0x0300010f

#define HFI_PROP_CODED_FRAMES			0x03000120

#define HFI_PROP_CABAC_SESSION			0x03000121

#define HFI_PROP_BUFFER_FW_MIN_OUTPUT_COUNT	0x03000124

#define HFI_PROP_PIC_ORDER_CNT_TYPE		0x03000128

#define HFI_PROP_QUALITY_MODE			0x03000148

enum hfi_color_primaries {
	HFI_PRIMARIES_RESERVED		= 0,
	HFI_PRIMARIES_BT709		= 1,
	HFI_PRIMARIES_UNSPECIFIED	= 2,
	HFI_PRIMARIES_BT470_SYSTEM_M	= 4,
	HFI_PRIMARIES_BT470_SYSTEM_BG	= 5,
	HFI_PRIMARIES_BT601_525		= 6,
	HFI_PRIMARIES_SMPTE_ST240M	= 7,
	HFI_PRIMARIES_GENERIC_FILM	= 8,
	HFI_PRIMARIES_BT2020		= 9,
	HFI_PRIMARIES_SMPTE_ST428_1	= 10,
	HFI_PRIMARIES_SMPTE_RP431_2	= 11,
	HFI_PRIMARIES_SMPTE_EG431_1	= 12,
	HFI_PRIMARIES_SMPTE_EBU_TECH	= 22,
};

enum hfi_transfer_characteristics {
	HFI_TRANSFER_RESERVED		= 0,
	HFI_TRANSFER_BT709		= 1,
	HFI_TRANSFER_UNSPECIFIED	= 2,
	HFI_TRANSFER_BT470_SYSTEM_M	= 4,
	HFI_TRANSFER_BT470_SYSTEM_BG	= 5,
	HFI_TRANSFER_BT601_525_OR_625	= 6,
	HFI_TRANSFER_SMPTE_ST240M	= 7,
	HFI_TRANSFER_LINEAR		= 8,
	HFI_TRANSFER_LOG_100_1		= 9,
	HFI_TRANSFER_LOG_SQRT		= 10,
	HFI_TRANSFER_XVYCC		= 11,
	HFI_TRANSFER_BT1361_0		= 12,
	HFI_TRANSFER_SRGB_SYCC		= 13,
	HFI_TRANSFER_BT2020_14		= 14,
	HFI_TRANSFER_BT2020_15		= 15,
	HFI_TRANSFER_SMPTE_ST2084_PQ	= 16,
	HFI_TRANSFER_SMPTE_ST428_1	= 17,
	HFI_TRANSFER_BT2100_2_HLG	= 18,
};

enum hfi_matrix_coefficients {
	HFI_MATRIX_COEFF_SRGB_SMPTE_ST428_1		= 0,
	HFI_MATRIX_COEFF_BT709				= 1,
	HFI_MATRIX_COEFF_UNSPECIFIED			= 2,
	HFI_MATRIX_COEFF_RESERVED			= 3,
	HFI_MATRIX_COEFF_FCC_TITLE_47			= 4,
	HFI_MATRIX_COEFF_BT470_SYS_BG_OR_BT601_625	= 5,
	HFI_MATRIX_COEFF_BT601_525_BT1358_525_OR_625	= 6,
	HFI_MATRIX_COEFF_SMPTE_ST240			= 7,
	HFI_MATRIX_COEFF_YCGCO				= 8,
	HFI_MATRIX_COEFF_BT2020_NON_CONSTANT		= 9,
	HFI_MATRIX_COEFF_BT2020_CONSTANT		= 10,
	HFI_MATRIX_COEFF_SMPTE_ST2085			= 11,
	HFI_MATRIX_COEFF_SMPTE_CHROM_DERV_NON_CONSTANT	= 12,
	HFI_MATRIX_COEFF_SMPTE_CHROM_DERV_CONSTANT	= 13,
	HFI_MATRIX_COEFF_BT2100				= 14,
};

#define HFI_PROP_SIGNAL_COLOR_INFO		0x03000155

#define HFI_PROP_DECODE_ORDER_OUTPUT		0x0300015b

enum hfi_picture_type {
	HFI_PICTURE_IDR	= 0x00000001,
	HFI_PICTURE_P	= 0x00000002,
	HFI_PICTURE_B	= 0x00000004,
	HFI_PICTURE_I	= 0x00000008,
	HFI_PICTURE_CRA	= 0x00000010,
	HFI_PICTURE_BLA	= 0x00000020,
};

#define HFI_PROP_PICTURE_TYPE			0x03000162

#define HFI_PROP_DEC_DEFAULT_HEADER             0x03000168

#define HFI_PROP_DEC_START_FROM_RAP_FRAME	0x03000169

#define HFI_PROP_NO_OUTPUT			0x0300016a

#define HFI_PROP_DPB_LIST			0x0300017A

#define HFI_PROP_UBWC_STRIDE_SCANLINE		0x03000190

#define HFI_PROP_COMV_BUFFER_COUNT		0x03000193

#define HFI_PROP_END				0x03FFFFFF

#define HFI_SESSION_ERROR_BEGIN			0x04000000

#define HFI_ERROR_UNKNOWN_SESSION		0x04000001

#define HFI_ERROR_MAX_SESSIONS			0x04000002

#define HFI_ERROR_FATAL				0x04000003

#define HFI_ERROR_INVALID_STATE			0x04000004

#define HFI_ERROR_INSUFFICIENT_RESOURCES	0x04000005

#define HFI_ERROR_BUFFER_NOT_SET		0x04000006

#define HFI_SESSION_ERROR_END			0x04FFFFFF

#define HFI_SYSTEM_ERROR_BEGIN			0x05000000

#define HFI_SYS_ERROR_WD_TIMEOUT                0x05000001

#define HFI_SYSTEM_ERROR_END			0x05FFFFFF

struct hfi_debug_header {
	u32   size;
	u32   debug_level;
	u32   reserved[2];
};

enum hfi_buffer_type {
	HFI_BUFFER_BITSTREAM		= 0x00000001,
	HFI_BUFFER_RAW			= 0x00000002,
	HFI_BUFFER_METADATA		= 0x00000003,
	HFI_BUFFER_SUBCACHE		= 0x00000004,
	HFI_BUFFER_PARTIAL_DATA		= 0x00000005,
	HFI_BUFFER_DPB			= 0x00000006,
	HFI_BUFFER_BIN			= 0x00000007,
	HFI_BUFFER_LINE			= 0x00000008,
	HFI_BUFFER_ARP			= 0x00000009,
	HFI_BUFFER_COMV			= 0x0000000A,
	HFI_BUFFER_NON_COMV		= 0x0000000B,
	HFI_BUFFER_PERSIST		= 0x0000000C,
	HFI_BUFFER_VPSS			= 0x0000000D,
};

enum hfi_buffer_host_flags {
	HFI_BUF_HOST_FLAG_NONE			= 0x00000000,
	HFI_BUF_HOST_FLAG_RELEASE		= 0x00000001,
	HFI_BUF_HOST_FLAG_READONLY		= 0x00000010,
	HFI_BUF_HOST_FLAG_CODEC_CONFIG		= 0x00000100,
	HFI_BUF_HOST_FLAGS_CB_NON_SECURE	= 0x00000200,
};

enum hfi_buffer_firmware_flags {
	HFI_BUF_FW_FLAG_NONE		= 0x00000000,
	HFI_BUF_FW_FLAG_RELEASE_DONE	= 0x00000001,
	HFI_BUF_FW_FLAG_READONLY	= 0x00000010,
};

#endif
